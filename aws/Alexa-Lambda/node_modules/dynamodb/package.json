{
  "_args": [
    [
      {
        "raw": "dynamodb",
        "scope": null,
        "escapedName": "dynamodb",
        "name": "dynamodb",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/opt/Projects/Hackathon/GreatUniHack2016/Alexa-Lambda"
    ]
  ],
  "_from": "dynamodb@latest",
  "_id": "dynamodb@0.3.6",
  "_inCache": true,
  "_location": "/dynamodb",
  "_npmUser": {
    "name": "spolu",
    "email": "polu.stanislas@gmail.com"
  },
  "_npmVersion": "1.2.17",
  "_phantomChildren": {},
  "_requested": {
    "raw": "dynamodb",
    "scope": null,
    "escapedName": "dynamodb",
    "name": "dynamodb",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/dynamodb/-/dynamodb-0.3.6.tgz",
  "_shasum": "19d76704dd12e3f5b596817884791840d725796f",
  "_shrinkwrap": null,
  "_spec": "dynamodb",
  "_where": "/opt/Projects/Hackathon/GreatUniHack2016/Alexa-Lambda",
  "author": {
    "name": "Stanislas Polu",
    "email": "stan@teleportd.com",
    "url": "http://twitter.com/spolu"
  },
  "bugs": {
    "url": "https://github.com/teleportd/node-dynamodb/issues"
  },
  "contributors": [
    {
      "name": "Karl Seguin"
    },
    {
      "name": "Juan Carlos del Valle"
    },
    {
      "name": "Pablo Cantero"
    },
    {
      "name": "Chris Stivers"
    },
    {
      "name": "Juho Mäkinen"
    },
    {
      "name": "Paul Tax"
    },
    {
      "name": "Alex Bosworth"
    },
    {
      "name": "Jimb Esser"
    },
    {
      "name": "Anthony Moi"
    }
  ],
  "dependencies": {
    "fwk": "0.1.x"
  },
  "description": "Simple DynamoDB Library for Node.js",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "19d76704dd12e3f5b596817884791840d725796f",
    "tarball": "https://registry.npmjs.org/dynamodb/-/dynamodb-0.3.6.tgz"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "homepage": "https://github.com/teleportd/node-dynamodb",
  "keywords": [
    "dynamo",
    "node",
    "db",
    "aws",
    "amazon"
  ],
  "main": "./lib/ddb",
  "maintainers": [
    {
      "name": "spolu",
      "email": "stan@bipsly.com"
    }
  ],
  "name": "dynamodb",
  "optionalDependencies": {},
  "readme": "## Basics\n\nA Simple, efficient and complete DynamoDB driver for Node.js, with:\n\n- Syntactic sweeteners/mapping to handle Amazon DynamoDB's JSON format in NodeJS\n- Efficient and transparent authentication and authentication refresh using Amazon STS\n- Integrated retry logic similar to Amazon's own PhP, Java libraries\n- Currently in production in multiple independent organizations with more than 80 write/s, 60 read/s\n- Support for all exposed DynamoDB operations\n\nDiscussion Group: http://groups.google.com/group/node-dynamodb\n\n## Usage\n\n    var ddb = require('dynamodb').ddb({ accessKeyId: '',\n                                        secretAccessKey: '' });\n\nAvailable options for the constructor are the following:\n\n- `accessKeyId`: the AWS AccessKeyId to use\n- `secretAccessKey`: the AWS SecretAccessKey associated\n- `endpoint`: the Region endpoint to use (defaults to: `dynamodb.us-east-1.amazonaws.com`)\n- `agent`: The NodeJS http.Agent to use (defaults to: `undefined`)\n- `sessionToken`: forced temporary session credential (defaults to: `undefined`)\n- `sessionExpires`: forced temeporary session credential (defaults to: `undefined`)\n\n\n### CreateTable\n\n    ddb.createTable('foo', { hash: ['id', ddb.schemaTypes().string],\n                             range: ['time', ddb.schemaTypes().number] },\n                    {read: 10, write: 10}, function(err, details) {});\n                    \n    // res: { \"CreationDateTime\": 1.310506263362E9,\n    //        \"KeySchema\": { \"HashKeyElement\": { \"AttributeName\": \"AttributeName1\",\n    //                                           \"AttributeType\": \"S\"},\n    //                       \"RangeKeyElement\": { \"AttributeName\": \"AttributeName2\",\n    //                                            \"AttributeType\": \"N\"} },\n    //        \"ProvisionedThroughput\":{ \"ReadCapacityUnits\": 5,\n    //                                  \"WriteCapacityUnits\": 10 },\n    //        \"TableName\":\"Table1\",\n    //        \"TableStatus\":\"CREATING\" }\n\n### ListTables \n\n    ddb.listTables({}, function(err, res) {});\n    \n    // res: { LastEvaluatedTableName: 'bar',\n              TableNames: ['test','foo','bar'] }\n\n### DescribeTable\n\n    ddb.describeTable('a-table', function(err, res) {});\n\n    // res: { ... }\n\n### PutItem\n\n    // flat [string, number, string array or number array] based json object\n    var item = { score: 304,\n                 date: (new Date).getTime(),\n                 sha: '3d2d6963',\n                 usr: 'spolu',\n                 lng: ['node', 'c++'] };\n\n    ddb.putItem('a-table', item, {}, function(err, res, cap) {});\n\n### GetItem\n\n    ddb.getItem('a-table', '3d2d6963', null, {}, function(err, res, cap) {});\n \n    // res: { score: 304,\n    //        date: 123012398234,\n    //        sha: '3d2d6963',\n    //        usr: 'spolu',\n    //        lng: ['node', 'c++'] };\n    \n### DeleteItem \n\n    ddb.deleteItem('a-table', 'sha', null, {}, function(err, res, cap) {});\n    \n### UpdateItem \n\n    ddb.updateItem('a-table', '3d2d6963', null, { 'usr': { value: 'smthg' } }, {},\n                   function(err, res, cap) {});\n\n    ddb.consumedCapacity();\n\n### BatchGetItem\n\n    ddb.batchGetItem({'table': { keys: ['foo', 'bar'] }}, function(err, res) {\n        if(err) {\n          console.log(err);\n        } else {\n          console.log(res);\n        }\n     });\n    \n    // res: { ConsumedCapacityUnits: 1.5,\n              items: [...] };\n\n### BatchWriteItem\n    \n    //ddb.batchWriteItem(PutRequest, DeleteRequest, cb)\n    ddb.batchWriteItem({'table': [item1, item2]}, {'table': ['foo', 'bar']}, function(err, res) {\n        if(err) {\n          console.log(err);\n        } else {\n          console.log(res);\n        }\n     });\n    \n    // res: { UnprocessedItems: { ... } };\n\n### Query          \n\n    ddb.query('test', '3d2d6963', {}, function(err, res, cap) {...});\n    \n    // res: { count: 23,\n    //        lastEvaluatedKey: { hash: '3d2d6963' },\n    //        items: [...] };\n\n### Scan\n\n    ddb.scan('test', {}, function(err, res) {\n        if(err) {\n          console.log(err);\n        } else {\n          console.log(res);\n        }\n     });\n    \n    // res: { count: 23,\n    //        lastEvaluatedKey: { hash: '3d2d6963' },\n    //        items: [...] };\n\n\n\nMore complete usage can be found in the examples directory\n\n## Run the Tests\n\nPut in your environment:\n\n    export DYNAMODB_ACCESSKEYID=YOURACCESSKEYID\n    export DYNAMODB_SECRETACCESSKEY=YOURSECRETKEYID\n    export DYNAMODB_TEST_TABLE1=test\n\nMake sure you have a `test` table created and available with `sha` as a hash key (string), then run:\n\n    make test\n\n## License\n\nDistributed under the MIT License.\n\n## Contributors\n\n    @karlseguin (Karl Seguin)\n    @imekinox (Juan Carlos del Valle)\n    @phstc (Pablo Cantero)\n    @cstivers78 (Chris Stivers)\n    @garo (Juho Mäkinen)\n    @tax (Paul Tax)\n    @alexbosworth (Alex Bosworth)\n    @jimbly (Jimb Esser)\n    @n1t0 (Anthony Moi)\n    @krasin\n    @aws-ew-dev\n",
  "readmeFilename": "ReadMe.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/teleportd/node-dynamodb.git"
  },
  "version": "0.3.6"
}
